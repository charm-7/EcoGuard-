import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Leaf, Search, Activity, BookOpen, Mic, RefreshCw, Loader2, MessageCircle, AlertTriangle } from 'lucide-react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

// --- Global Constants and Utilities ---
const MODEL_NAME = 'gemini-2.5-flash-preview-05-20';
const API_URL_BASE = `https://generativelanguage.googleapis.com/v1beta/models/${MODEL_NAME}:generateContent?key=`;
const apiKey = ""; // Canvas will provide the API key at runtime

// Helper to handle API call retries (Exponential Backoff)
const fetchWithRetry = async (url, options, retries = 3) => {
  for (let i = 0; i < retries; i++) {
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      if (i === retries - 1) throw error;
      // Exponential backoff
      const delay = Math.pow(2, i) * 1000 + Math.random() * 1000;
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};

// --- Firebase Initialization Setup (MANDATORY TEMPLATE) ---
const useFirebaseSetup = () => {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    useEffect(() => {
        try {
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
            const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

            if (firebaseConfig) {
                const app = initializeApp(firebaseConfig);
                const firestoreDb = getFirestore(app);
                const firebaseAuth = getAuth(app);

                setDb(firestoreDb);
                setAuth(firebaseAuth);

                const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
                    if (user) {
                        setUserId(user.uid);
                    } else if (initialAuthToken) {
                        await signInWithCustomToken(firebaseAuth, initialAuthToken);
                    } else {
                        await signInAnonymously(firebaseAuth);
                    }
                    setIsAuthReady(true);
                });

                return () => unsubscribe();
            } else {
                // If no firebase config, mock as ready for app functionality
                setUserId(crypto.randomUUID());
                setIsAuthReady(true);
            }
        } catch (error) {
            console.error("Firebase Initialization Error:", error);
            setUserId('error-user');
            setIsAuthReady(true);
        }
    }, []);

    return { db, auth, userId, isAuthReady };
};

// --- Component: Display Analysis Results ---
const ResultsDisplay = ({ result }) => {
    if (!result) return null;

    const parseResultSections = (text) => {
        // Simple heuristic to split response into sections based on typical formatting
        const sections = {
            diagnosis: '',
            treatment: '',
            education: '',
            safety: ''
        };

        const lines = text.split('\n').filter(line => line.trim() !== '');

        let currentSection = 'diagnosis';
        for (const line of lines) {
            if (line.includes('Diagnosis:')) {
                currentSection = 'diagnosis';
                sections.diagnosis += line.replace('**Diagnosis:**', '').trim() + '\n';
            } else if (line.includes('Treatment Plan:')) {
                currentSection = 'treatment';
                sections.treatment += line.replace('**Treatment Plan:**', '').trim() + '\n';
            } else if (line.includes('Educational Content:')) {
                currentSection = 'education';
                sections.education += line.replace('**Educational Content:**', '').trim() + '\n';
            } else if (line.includes('Safety & Prevention:')) {
                currentSection = 'safety';
                sections.safety += line.replace('**Safety & Prevention:**', '').trim() + '\n';
            } else {
                sections[currentSection] += line + '\n';
            }
        }

        return {
            diagnosis: sections.diagnosis.trim(),
            treatment: sections.treatment.trim(),
            education: sections.education.trim(),
            safety: sections.safety.trim()
        };
    };

    const sections = parseResultSections(result.text);

    const SourceList = () => (
        result.sources && result.sources.length > 0 ? (
            <div className="mt-6 border-t pt-4 border-gray-200">
                <h3 className="font-semibold text-sm text-gray-600 mb-2 flex items-center">
                    <BookOpen className="w-4 h-4 mr-2" />
                    Sources
                </h3>
                <ul className="list-disc pl-5 text-sm space-y-1">
                    {result.sources.map((source, index) => (
                        <li key={index}>
                            <a 
                                href={source.uri} 
                                target="_blank" 
                                rel="noopener noreferrer" 
                                className="text-emerald-600 hover:text-emerald-500 hover:underline transition-colors"
                            >
                                {source.title || source.uri}
                            </a>
                        </li>
                    ))}
                </ul>
            </div>
        ) : null
    );

    const SectionCard = ({ icon: Icon, title, content }) => (
        <div className="bg-white p-4 rounded-xl shadow-lg border border-gray-100 mb-4">
            <h4 className="flex items-center text-lg font-bold text-emerald-700 mb-2">
                <Icon className="w-5 h-5 mr-2 text-emerald-500" />
                {title}
            </h4>
            <div className="text-gray-700 whitespace-pre-wrap">{content}</div>
        </div>
    );

    return (
        <div className="mt-8">
            <h2 className="text-2xl font-extrabold text-gray-800 mb-6 flex items-center">
                <Leaf className="w-6 h-6 mr-2 text-emerald-600" />
                Plant Diagnosis Report
            </h2>
            
            <SectionCard 
                icon={Search} 
                title="AI Diagnosis" 
                content={sections.diagnosis || "No specific diagnosis found."} 
            />
            
            <SectionCard 
                icon={Activity} 
                title="Treatment Plan" 
                content={sections.treatment || "No treatment plan suggested."} 
            />
            
            <SectionCard 
                icon={MessageCircle} 
                title="Educational & Communication Support (Simulated)"
                content={sections.education || "Content for animated videos and voice assistance will be generated here."} 
            />

            <SectionCard 
                icon={AlertTriangle} 
                title="Safety & Prevention"
                content={sections.safety || "No safety and prevention tips provided."} 
            />
            
            <SourceList />
        </div>
    );
};


// --- Main App Component ---
export default function App() {
    const { userId, isAuthReady } = useFirebaseSetup();
    const [plantDescription, setPlantDescription] = useState('');
    const [analysisResult, setAnalysisResult] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

    const systemPrompt = `You are a world-class AI Plant Pathologist and Agricultural Advisor. Your goal is to analyze the user's description of a plant's symptoms and provide an early, grounded diagnosis and a comprehensive treatment plan. Structure your response clearly using the following four headings. Use real-world, actionable, and safe advice.
    1. **Diagnosis:** State the most likely disease or deficiency, its cause, and the level of urgency.
    2. **Treatment Plan:** Provide a step-by-step plan including natural, chemical, and cultural methods (e.g., pruning, soil adjustment).
    3. **Educational Content:** Provide a short, simple script suitable for an illiterate farmer, focusing on key visual cues for health and disease (simulating the content for AI animated videos and voice assistants).
    4. **Safety & Prevention:** Offer general tips on how to keep the crop healthier in the long run.`;

    const runAnalysis = useCallback(async () => {
        if (!plantDescription.trim() || isLoading) return;

        setIsLoading(true);
        setAnalysisResult(null);
        setError(null);

        const userQuery = `Plant Symptom Description (simulating photo analysis and voice input): ${plantDescription}. Provide a detailed analysis based on the four required headings.`;

        const payload = {
            contents: [{ parts: [{ text: userQuery }] }],
            tools: [{ "google_search": {} }],
            systemInstruction: { parts: [{ text: systemPrompt }] },
        };

        const apiUrl = `${API_URL_BASE}${apiKey}`;

        try {
            const result = await fetchWithRetry(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const candidate = result.candidates?.[0];

            if (candidate && candidate.content?.parts?.[0]?.text) {
                const text = candidate.content.parts[0].text;
                let sources = [];
                const groundingMetadata = candidate.groundingMetadata;

                if (groundingMetadata && groundingMetadata.groundingAttributions) {
                    sources = groundingMetadata.groundingAttributions
                        .map(attribution => ({
                            uri: attribution.web?.uri,
                            title: attribution.web?.title,
                        }))
                        .filter(source => source.uri && source.title);
                }

                setAnalysisResult({ text, sources });
            } else {
                setError('Could not get a diagnosis. Please try a different description.');
                console.error("API response structure unexpected:", result);
            }
        } catch (err) {
            console.error('API Call Error:', err);
            setError('Failed to connect to the AI service. Please check your connection.');
        } finally {
            setIsLoading(false);
        }
    }, [plantDescription, isLoading, systemPrompt]);

    const placeholderText = useMemo(() => {
        return "Example: 'My tomato plant leaves are turning yellow and have brown spots with yellow halos. The fruit is small and rotten. It's been raining heavily.'";
    }, []);

    const isButtonDisabled = !plantDescription.trim() || isLoading;

    return (
        <div className="min-h-screen bg-gray-50 font-sans p-4 sm:p-8">
            <div className="max-w-4xl mx-auto">
                {/* Header */}
                <header className="text-center py-6 bg-white rounded-xl shadow-md mb-8">
                    <div className="flex justify-center items-center mb-2">
                        <Leaf className="w-8 h-8 text-emerald-600 mr-2" />
                        <h1 className="text-3xl font-extrabold text-gray-900">
                            AI Crop Health Advisor
                        </h1>
                    </div>
                    <p className="text-gray-500 mt-1">Early diagnosis to save your crops and boost productivity.</p>
                </header>

                {/* Input Area */}
                <div className="bg-white p-6 sm:p-8 rounded-xl shadow-lg border-t-4 border-emerald-500">
                    <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                        <Search className="w-5 h-5 mr-2 text-emerald-500" />
                        Describe Plant Symptoms
                    </h2>
                    <p className="text-sm text-gray-600 mb-4">
                        *Simulating image analysis and voice input. Please describe the symptoms of your plant.*
                    </p>
                    
                    <textarea
                        className="w-full p-3 h-32 border border-gray-300 rounded-lg focus:ring-emerald-500 focus:border-emerald-500 transition-shadow resize-none text-gray-700"
                        placeholder={placeholderText}
                        value={plantDescription}
                        onChange={(e) => setPlantDescription(e.target.value)}
                        disabled={isLoading}
                    />

                    <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 mt-4">
                        <button
                            onClick={runAnalysis}
                            disabled={isButtonDisabled}
                            className={`w-full sm:w-auto flex-grow px-6 py-3 rounded-xl font-semibold transition-all duration-300 shadow-md ${
                                isButtonDisabled
                                    ? 'bg-emerald-300 text-emerald-700 cursor-not-allowed'
                                    : 'bg-emerald-600 text-white hover:bg-emerald-700 hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-emerald-500/50'
                            }`}
                        >
                            {isLoading ? (
                                <div className="flex items-center justify-center">
                                    <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                                    Analyzing Symptoms...
                                </div>
                            ) : (
                                <div className="flex items-center justify-center">
                                    <Leaf className="w-5 h-5 mr-2" />
                                    Get Diagnosis
                                </div>
                            )}
                        </button>

                        <button
                            disabled={isLoading}
                            className={`w-full sm:w-auto px-6 py-3 rounded-xl font-semibold transition-all duration-300 shadow-md flex items-center justify-center ${
                                isLoading
                                    ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                                    : 'bg-indigo-500 text-white hover:bg-indigo-600 hover:shadow-lg'
                            }`}
                        >
                            <Mic className="w-5 h-5 mr-2" />
                            Voice Assistant (Demo)
                        </button>
                    </div>
                </div>
                
                {/* User ID Display (MANDATORY for multi-user apps) */}
                {isAuthReady && userId && (
                    <div className="mt-4 text-center text-xs text-gray-400">
                        <span className="font-medium text-gray-600">User ID:</span> {userId}
                    </div>
                )}
                
                {/* Error Display */}
                {error && (
                    <div className="mt-6 p-4 bg-red-100 border-l-4 border-red-500 text-red-700 rounded-lg shadow-sm">
                        <p className="font-semibold">Analysis Error</p>
                        <p className="text-sm">{error}</p>
                    </div>
                )}

                {/* Results Display */}
                {!isLoading && analysisResult && (
                    <ResultsDisplay result={analysisResult} />
                )}
            </div>
        </div>
    );
}